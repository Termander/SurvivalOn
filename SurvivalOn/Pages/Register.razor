@layout EmptyLayout
@page "/register"

@using SurvivalOn.Models

<style>
.register-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #2e3c4f 0%, #4e6e8e 100%);
}
.register-box {
    background: #fff;
    padding: 2.5rem 2rem;
    border-radius: 16px;
    box-shadow: 0 4px 32px rgba(0,0,0,0.15);
    min-width: 340px;
    max-width: 90vw;
}
.register-box h1 {
    text-align: center;
    margin-bottom: 1rem;
    color: #2e3c4f;
}
.register-box h3 {
    text-align: center;
    margin-bottom: 1.5rem;
    color: #4e6e8e;
}
</style>

<div class="register-container">
    <div class="register-box">
        <h1>SurvivalOn</h1>
        <h3>Register</h3>
        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="name">Name</label>
                <InputText id="name" class="form-control" @bind-Value="registerModel.Name" />
            </div>
            <div class="form-group">
                <label for="surname">Surname</label>
                <InputText id="surname" class="form-control" @bind-Value="registerModel.Surname" />
            </div>
            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="registerModel.UserName" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" />
            </div>
            <button type="submit" class="btn btn-primary w-100 mt-3">Register</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3">@message</div>
        }
    </div>
</div>

@code {
    private PlayerData registerModel = new();
    private string? message;
    private bool isSuccess = false;

    private void HandleRegister()
    {
        // Check for empty fields
        if (string.IsNullOrWhiteSpace(registerModel.Name) ||
            string.IsNullOrWhiteSpace(registerModel.Surname) ||
            string.IsNullOrWhiteSpace(registerModel.UserName) ||
            string.IsNullOrWhiteSpace(registerModel.Password) ||
            string.IsNullOrWhiteSpace(registerModel.Email))
        {
            message = "All fields are required.";
            isSuccess = false;
            return;
        }

        // Check if username exists
        var existing = PlayerDataGenerator.LoadPlayerDataByUserName(registerModel.UserName);
        if (existing != null)
        {
            message = "Username already exists. Please choose another.";
            isSuccess = false;
            return;
        }

        // Save new player
        registerModel.Id = Guid.NewGuid();
        registerModel.PCIds = new List<Guid>();
        registerModel.RegisterDate = DateTime.UtcNow;
        //PlayerDataGenerator.SaveNewPlayer(registerModel);
        string? error;
        bool success = PlayerDataGenerator.SaveNewPlayer(registerModel, out error);
        if (!success)
        {
            message = error;
            isSuccess = false;
        }else
        {
            message = "Registration successful! You can now log in.";
            isSuccess = true;
        }

        //message = "Registration successful! You can now log in.";
        //isSuccess = true;

        // Optionally, clear the form
        registerModel = new PlayerData();
    }
}