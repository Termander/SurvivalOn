@page "/home"
@using SurvivalCL
@inject SurvivalOn.Services.UserSession UserSession
@inject HttpClient Http
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>

@if (showWarningBar)
{
    <div class="warning-bar">
        <strong>Warning:</strong>
        @foreach (var warning in warnings)
        {
            <span class="warning-item">@warning</span>
        }
    </div>
}

<div class="main-content">
    <div class="left-panel">
        <div class="body-image-crop"></div>
    </div>
    <div class="right-panel">
        @if (isSessionLoaded)
        {
            <p class="status-description">🩺 @GetCombinedStatusDescription()</p>
        }
        else
        {
            <p class="status-description">Loading status...</p>
        }
    </div>
</div>

@if (showCharacterModal)
{
    <CharacterCreation @ref="characterCreation" OnCharacterCreated="OnCharacterCreated" />
}

@code {
    private bool showCharacterModal = false;
    private CharacterCreation? characterCreation;
    private string? apiUrl;
    private bool showWarningBar = false;
    private List<string> warnings = new();
    private bool isSessionLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await UserSession.LoadSessionAsync();
        isSessionLoaded = true;
        // Check if CharGuid is null or empty
        if (UserSession.CharGuid == null || UserSession.CharGuid == Guid.Empty)
        {
            showCharacterModal = true;
        }
        else
        {
            apiUrl = Configuration["Api:BaseUrlCharacter"];
            // Load character and game state from API
            var response = await Http.GetAsync($"{apiUrl}/load/{UserSession.CharGuid}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoadCharacterResult>();
                if (result is not null)
                {
                    UserSession.activeChar = result.Character;
                    UserSession.stateOfGame = result.GameState;
                    await UserSession.SaveSessionAsync();
                    CheckWarnings();
                }
                else
                {
                    showCharacterModal = true;
                }
            }
            else
            {
                showCharacterModal = true;
            }
        }
    }
    private void CheckWarnings()
    {
        warnings.Clear();
        var c = UserSession.activeChar;
        if (c == null) return;

        warnings.AddRange(c.GetWarnings());
        showWarningBar = warnings.Count > 0;
    }

    private async Task OnCharacterCreated(Character character)
    {
        await Task.CompletedTask;

        UserSession.CharGuid = character.Id;
        await UserSession.SaveSessionAsync();
        showCharacterModal = false;
        StateHasChanged();
    }
    private class LoadCharacterResult
    {
        public Character Character { get; set; } = null!;
        public GameState GameState { get; set; } = null!;
    }

    private string GetCombinedStatusDescription()
    {
        var warmth = Character.GetBodyWarmthDescription(UserSession.activeChar?.BodyWarmth ?? 100);
        var fatigue = CharacterStatusDescriptions.GetFatigueDescription(UserSession.activeChar?.Fatigue ?? 100);
        var stamina = CharacterStatusDescriptions.GetStaminaDescription(UserSession.activeChar?.Stamina ?? 100);
        var hunger = CharacterStatusDescriptions.GetHungerDescription(UserSession.activeChar?.Hunger ?? 100);
        var sleep = CharacterStatusDescriptions.GetSleepDescription(UserSession.activeChar?.Sleep ?? 100);
        var condition = CharacterStatusDescriptions.GetConditionDescription(UserSession.activeChar?.Condition ?? CharacterCondition.Healthy);

        return $"You feel;{warmth} {fatigue} {stamina} {hunger} {sleep} {condition}";
    }
}



