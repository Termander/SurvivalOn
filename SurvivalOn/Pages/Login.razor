@layout EmptyLayout
@page "/"
@page "/login"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IConfiguration Configuration

<style>
.splash-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #2e3c4f 0%, #4e6e8e 100%);
}
.splash-box {
    background: #fff;
    padding: 2.5rem 2rem;
    border-radius: 16px;
    box-shadow: 0 4px 32px rgba(0,0,0,0.15);
    min-width: 320px;
    max-width: 90vw;
}
.splash-box h1 {
    text-align: center;
    margin-bottom: 1rem;
    color: #2e3c4f;
}
.splash-box h3 {
    text-align: center;
    margin-bottom: 1.5rem;
    color: #4e6e8e;
}
</style>

<div class="splash-container">
    <div class="splash-box">
        <h1>SurvivalOn</h1>
        <h3>Login</h3>
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>
            <button type="submit" class="btn btn-primary w-100 mt-3">Login</button>
            <button type="button" class="btn btn-secondary w-100 mt-2" @onclick="NavigateToRegister">Register</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    // Replace with your actual API base URL (e.g., "https://localhost:5001/api/players")
    //private string apiUrl = "https://localhost:5001/api/players";

    private string? apiUrl;

    protected override void OnInitialized()
    {
        apiUrl = Configuration["Api:BaseUrlPlayers"];
        if (string.IsNullOrWhiteSpace(apiUrl))
        {
            throw new InvalidOperationException("API URL is not configured properly in the application settings.");
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = null;

        try
        {
            // Call the API to get player by username
            var response = await Http.GetAsync($"{apiUrl}/{Uri.EscapeDataString(loginModel.Username)}");
            if (response.IsSuccessStatusCode)
            {
                var player = await response.Content.ReadFromJsonAsync<PlayerData>();
                if (player != null && player.Password == loginModel.Password)
                {
                    // Authentication successful, redirect to main layout with user ID
                    Navigation.NavigateTo($"/home?userId={player.Id}");
                    return;
                }
            }
            errorMessage = "Invalid username or password.";
        }
        catch
        {
            errorMessage = "Login failed. Please try again.";
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class PlayerData
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Surname { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<Guid> PCIds { get; set; } = new();
        public DateTime RegisterDate { get; set; }
    }
}