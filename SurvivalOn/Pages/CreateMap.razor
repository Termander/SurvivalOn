@page "/createmap"

@inject HttpClient Http
@inject IConfiguration Configuration

@using SurvivalOn.Models

<PageTitle>Create Map</PageTitle>

<h3>Create Procedural Island Map</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="GenerateMapAsync">Generate New Island Map</button>
</div>

@if (mapTiles != null && tilePath != null)
{
    <div class="map-grid" style="position:relative; width:@(MapSize*tileSize)px; height:@(MapSize*tileSize)px;">
        @for (int y = 0; y < MapSize; y++)
        {
            for (int x = 0; x < MapSize; x++)
            {
                var tile = mapTiles[x, y];
                if (tile != null)
                {
                    <div class="map-tile"
                         style="
                            position:absolute;
                            left:@(tile.X * tile.Width)px;
                            top:@(tile.Y * tile.Height)px;
                            width:@tile.Width}px;
                            height:@tile.Height}px;
                            background-image:url('@tilePath');
                            background-position:-@(tile.ImageX)px -@(tile.ImageY)px;
                            background-size:auto;
                            border:1px solid #ccc;"
                         title="@tile.TileType">
                    </div>
                }
            }
        }
    </div>
}

@code {
    private const int MapSize = 24;
    private int tileSize = 16;
    private MapTile[,]? mapTiles;
    private string? apiUrl;
    private string? tilePath;

    private async Task GenerateMapAsync()
    {

        apiUrl = Configuration["Api:BaseUrlMapCreation"];
        var response = await Http.GetAsync($"{apiUrl}");
        if (response.IsSuccessStatusCode)
        {
            try
            {
                // Clear existing map tiles
                mapTiles = null;

                //var mapResponse = await response.Content.ReadFromJsonAsync<MapResponseDto>();
                //var mapList = await response.Content.ReadFromJsonAsync<List<MapTile>>();
                var mapResponse = await response.Content.ReadFromJsonAsync<MapResponseDto>();
                if (mapResponse?.MapList != null)
                {
                    tilePath = mapResponse.TilePath;
                    mapTiles = new MapTile[MapSize, MapSize];
                    foreach (var tile in mapResponse.MapList)
                    {
                        if (tile.X < MapSize && tile.Y < MapSize)
                            mapTiles[tile.X, tile.Y] = tile;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error clearing map tiles: {ex.Message}");
            }
        }

        if (mapTiles != null && mapTiles[0, 0] != null)
        {
            tileSize = mapTiles[0, 0].Width;
        }
    }

    private string GetTileType(MapTile? tile)
    {
        if (tile == null) return "";
        return tile.TileId.ToString();
    }


}