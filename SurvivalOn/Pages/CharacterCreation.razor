@using SurvivalCL
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject SurvivalOn.Services.UserSession UserSession

@if (true) // Always visible as a modal for now
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content" style="background:linear-gradient(135deg,#f8fafc 60%,#dbeafe 100%);border-radius:1rem;">
                <div class="modal-header" style="background:#2563eb;color:white;border-top-left-radius:1rem;border-top-right-radius:1rem;">
                    <h5 class="modal-title">Create Your Character</h5>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs mb-3">
                        <li class="nav-item">
                            <button type="button" class="nav-link @(activeTab == 0 ? "active" : "")" @onclick="() => activeTab = 0">Stats</button>
                        </li>
                        <li class="nav-item">
                            <button type="button" class="nav-link @(activeTab == 1 ? "active" : "")" @onclick="() => activeTab = 1">Proficiencies</button>
                        </li>
                    </ul>
                    @if (activeTab == 0)
                    {
                        <div>
                            <div class="mb-3">
                                <label class="form-label fw-bold" style="color:#2563eb;">Name:</label>
                                <input @bind="name" class="form-control border-primary" style="background:#e0e7ff;" />
                            </div>
                            <div class="mb-3 text-center">
                                <button class="btn btn-secondary" style="background:#818cf8;border:none;" @onclick="RollStats">🎲 Roll Abilities</button>
                            </div>
                            <div class="row g-2 mb-3">
                                <div class="col-6 col-md-4">
                                    <label class="form-label" style="color:#1e293b;">Strength</label>
                                    <input type="number" min="16" max="24" @bind="str" @bind:event="oninput" class="form-control border-info" style="background:#f1f5f9;" />
                                </div>
                                <div class="col-6 col-md-4">
                                    <label class="form-label" style="color:#1e293b;">Dexterity</label>
                                    <input type="number" min="16" max="24" @bind="dex" @bind:event="oninput" class="form-control border-info" style="background:#f1f5f9;" />
                                </div>
                                <div class="col-6 col-md-4">
                                    <label class="form-label" style="color:#1e293b;">Constitution</label>
                                    <input type="number" min="16" max="24" @bind="con" @bind:event="oninput" class="form-control border-info" style="background:#f1f5f9;" />
                                </div>
                                <div class="col-6 col-md-4">
                                    <label class="form-label" style="color:#1e293b;">Intelligence</label>
                                    <input type="number" min="16" max="24" @bind="intel" @bind:event="oninput" class="form-control border-info" style="background:#f1f5f9;" />
                                </div>
                                <div class="col-6 col-md-4">
                                    <label class="form-label" style="color:#1e293b;">Wisdom</label>
                                    <input type="number" min="16" max="24" @bind="wis" @bind:event="oninput" class="form-control border-info" style="background:#f1f5f9;" />
                                </div>
                                <div class="col-6 col-md-4">
                                    <label class="form-label" style="color:#1e293b;">Charisma</label>
                                    <input type="number" min="16" max="24" @bind="cha" @bind:event="oninput" class="form-control border-info" style="background:#f1f5f9;" />
                                </div>
                            </div>
                            <div class="mb-3 text-center">
                                <span class="badge bg-primary fs-6">
                                    Bonus points to distribute: @BonusPointsLeft
                                </span>
                            </div>
                        </div>
                    }
                    else if (activeTab == 1)
                    {
                        @if (isLoadingProficiencies)
                        {
                            <div>Loading proficiencies...</div>
                        }
                        else
                        {
                            <div>
                                <div class="mb-2 mt-2 px-2 py-1 rounded" style="background:linear-gradient(90deg,#1e293b 60%,#2563eb 100%);color:#fff;font-weight:bold;font-size:1.2rem;letter-spacing:1px;box-shadow:0 2px 8px #0001;">
                                    <span style="text-shadow:1px 1px 2px #0006;">&#9876; Combat Proficiencies (@GetUnselectedCount("combat"))</span>
                                </div>
                                <div style="max-height: 132px; overflow-y: auto;">
                                    @foreach (var prof in combatProficiencies)
                                    {
                                        <div class="d-flex align-items-center mb-2 px-2 py-1 rounded" style="background:#f1f5f9;">
                                            <input class="form-check-input me-2" type="checkbox"
                                                   checked="@selectedProficiencies.Contains(prof.Name)"
                                                   disabled="@IsCheckboxDisabled(prof.Name)"
                                                   @onchange="() => ToggleProficiency(prof.Name)" />
                                            <button type="button" class="btn btn-link p-0 me-2" title="Info"
                                                    @onclick="() => ShowProficiencyInfo(prof.Name, prof.Description, combatHeader)">
                                                <span style="font-size:1.2em;">&#9432;</span>
                                            </button>
                                            <label class="form-check-label mb-0">@prof.Name</label>
                                        </div>
                                    }
                                </div>

                                <div class="mb-2 mt-4 px-2 py-1 rounded" style="background:linear-gradient(90deg,#065f46 60%,#22d3ee 100%);color:#fff;font-weight:bold;font-size:1.2rem;letter-spacing:1px;box-shadow:0 2px 8px #0001;">
                                    <span style="text-shadow:1px 1px 2px #0006;">&#128295; Build Proficiencies (@GetUnselectedCount("build"))</span>
                                </div>
                                <div style="max-height: 132px; overflow-y: auto;">
                                    @foreach (var prof in buildProficiencies)
                                    {
                                        <div class="d-flex align-items-center mb-2 px-2 py-1 rounded" style="background:#f1f5f9;">
                                            <input class="form-check-input me-2" type="checkbox"
                                                   checked="@selectedProficiencies.Contains(prof.Name)"
                                                   disabled="@IsCheckboxDisabled(prof.Name)"
                                                   @onchange="() => ToggleProficiency(prof.Name)" />
                                            <button type="button" class="btn btn-link p-0 me-2" title="Info"
                                                    @onclick="() => ShowProficiencyInfo(prof.Name, prof.Description, buildHeader)">
                                                <span style="font-size:1.2em;">&#9432;</span>
                                            </button>
                                            <label class="form-check-label mb-0">@prof.Name</label>
                                        </div>
                                    }
                                </div>

                                <div class="mb-2 mt-4 px-2 py-1 rounded" style="background:linear-gradient(90deg,#a16207 60%,#fde68a 100%);color:#1e293b;font-weight:bold;font-size:1.2rem;letter-spacing:1px;box-shadow:0 2px 8px #0001;">
                                    <span style="text-shadow:1px 1px 2px #fff8;">&#127793; General Proficiencies (@GetUnselectedCount("general"))</span>
                                </div>
                                <div style="max-height: 132px; overflow-y: auto;">
                                    @foreach (var prof in generalProficiencies)
                                    {
                                        <div class="d-flex align-items-center mb-2 px-2 py-1 rounded" style="background:#f1f5f9;">
                                            <input class="form-check-input me-2" type="checkbox"
                                                   checked="@selectedProficiencies.Contains(prof.Name)"
                                                   disabled="@IsCheckboxDisabled(prof.Name)"
                                                   @onchange="() => ToggleProficiency(prof.Name)" />
                                            <button type="button" class="btn btn-link p-0 me-2" title="Info"
                                                    @onclick="() => ShowProficiencyInfo(prof.Name, prof.Description, generalHeader)">
                                                <span style="font-size:1.2em;">&#9432;</span>
                                            </button>
                                            <label class="form-check-label mb-0">@prof.Name</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="modal-footer" style="border-bottom-left-radius:1rem;border-bottom-right-radius:1rem;">
                    <button class="btn btn-primary" style="background:#2563eb;border:none;" @onclick="CreateCharacterAsync" disabled="@(!CanCreate)">Create</button>
                </div>
            </div>
        </div>
    </div>
    @if (showPopup && popupProficiencyObj != null)
    {
        <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.3);">
            <div class="modal-dialog" style="position:absolute;top:150px;left:0;right:0;margin-left:auto;margin-right:auto;width:40vw;max-width:600px;min-width:350px;">
                <div class="modal-content">
                    <div class="modal-header proficiency-popup-header" style="@GetPopupHeaderStyle()">
                        <img src="@GetProficiencyImage(popupProficiencyObj)" alt="Proficiency Image" class="proficiency-popup-image" />
                        <h5 class="modal-title mb-0 ms-2" style="line-height:36px;">@popupProficiencyObj.Name</h5>
                        <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-2">
                            <strong>Prerequisites:</strong>
                            @if ((popupProficiencyObj.AbilityPrerequisites?.Any() ?? false) || (popupProficiencyObj.PrerequisiteProficiencies?.Any() ?? false))
                            {
                                <ul class="mb-2">
                                    @if (popupProficiencyObj?.AbilityPrerequisites != null)
                                    {
                                        @foreach (var prereq in popupProficiencyObj.AbilityPrerequisites)
                                        {
                                            <li>@prereq.Key: @prereq.Value</li>
                                        }
                                    }
                                    @if (popupProficiencyObj?.PrerequisiteProficiencies != null)
                                    {
                                        @foreach (var prereq in popupProficiencyObj.PrerequisiteProficiencies)
                                        {
                                            <li>@prereq.Key: Level @prereq.Value</li>
                                        }
                                    }
                                </ul>
                            }
                            else
                            {
                                <span>None</span>
                            }
                        </div>
                        <div class="mb-2">
                            @popupProficiencyObj?.Description
                        </div>
                        <hr />
                        <div>
                            <strong>Bonus:</strong> @popupProficiencyObj?.BonusDescription
                        </div>
                    </div>
                    <div class="modal-footer" style="border-top:none;">
                        <button class="btn btn-secondary" @onclick="ClosePopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
@code {

    private const int CombatLimit = 1;
    private const int BuildLimit = 2;
    private const int GeneralLimit = 2;
    private string? popupGroup;


    private Proficiency? popupProficiencyObj;



    private void ShowProficiencyInfo(string name, string description, string group)
    {
        popupProficiencyObj = combatProficiencies.Concat(buildProficiencies).Concat(generalProficiencies)
            .FirstOrDefault(p => p.Name == name);
        popupProficiency = name;
        popupDescription = description;
        popupGroup = group;
        showPopup = true;
    }

    private string GetProficiencyImage(Proficiency prof)
    {
        return string.IsNullOrWhiteSpace(prof.ImagePath)
            ? "images/proficiencies/fire.png"
            : $"images/proficiencies/{prof.ImagePath}";
    }

    private void ToggleProficiency(string name)
    {
        string group = GetProficiencyGroup(name);

        int selectedCount = group switch
        {
            "combat" => selectedProficiencies.Count(p => combatProficiencies.Any(cp => cp.Name == p)),
            "build" => selectedProficiencies.Count(p => buildProficiencies.Any(bp => bp.Name == p)),
            "general" => selectedProficiencies.Count(p => generalProficiencies.Any(gp => gp.Name == p)),
            _ => 0
        };

        int limit = group switch
        {
            "combat" => CombatLimit,
            "build" => BuildLimit,
            "general" => GeneralLimit,
            _ => 0
        };

        bool isSelected = selectedProficiencies.Contains(name);

        if (isSelected)
        {
            selectedProficiencies.Remove(name);
        }
        else if (selectedCount < limit)
        {
            selectedProficiencies.Add(name);
        }
    }

    private string GetProficiencyGroup(string name)
    {
        if (combatProficiencies.Any(p => p.Name == name)) return "combat";
        if (buildProficiencies.Any(p => p.Name == name)) return "build";
        if (generalProficiencies.Any(p => p.Name == name)) return "general";
        return "";
    }

    private int GetUnselectedCount(string group)
    {
        int limit = group switch
        {
            "combat" => CombatLimit,
            "build" => BuildLimit,
            "general" => GeneralLimit,
            _ => 0
        };
        int selected = group switch
        {
            "combat" => selectedProficiencies.Count(p => combatProficiencies.Any(cp => cp.Name == p)),
            "build" => selectedProficiencies.Count(p => buildProficiencies.Any(bp => bp.Name == p)),
            "general" => selectedProficiencies.Count(p => generalProficiencies.Any(gp => gp.Name == p)),
            _ => 0
        };
        return Math.Max(0, limit - selected);
    }

    private bool IsCheckboxDisabled(string name)
    {
        string group = GetProficiencyGroup(name);
        int limit = group switch
        {
            "combat" => CombatLimit,
            "build" => BuildLimit,
            "general" => GeneralLimit,
            _ => 0
        };
        int selected = group switch
        {
            "combat" => selectedProficiencies.Count(p => combatProficiencies.Any(cp => cp.Name == p)),
            "build" => selectedProficiencies.Count(p => buildProficiencies.Any(bp => bp.Name == p)),
            "general" => selectedProficiencies.Count(p => generalProficiencies.Any(gp => gp.Name == p)),
            _ => 0
        };
        return !selectedProficiencies.Contains(name) && selected >= limit;
    }

    private string GetPopupHeaderStyle()
    {
        return popupGroup switch
        {
            "combat" => "background:linear-gradient(90deg,#1e293b 60%,#2563eb 100%);color:#fff;",
            "build" => "background:linear-gradient(90deg,#065f46 60%,#22d3ee 100%);color:#fff;",
            "general" => "background:linear-gradient(90deg,#a16207 60%,#fde68a 100%);color:#1e293b;",
            _ => ""
        };
    }
    private string GetPopupIcon()
    {
        return popupGroup switch
        {
            "combat" => "&#9876;",      // ⚔
            "build" => "&#128295;",    // 🔧
            "general" => "&#127793;",  // 🌹
            _ => "&#9432;"             // ℹ
        };
    }

    private class CreateCharacterResult
    {
        public Guid CharacterId { get; set; }
        public GameState GameState { get; set; } = new GameState(false);
    }

    [Parameter] public EventCallback<Character> OnCharacterCreated { get; set; }


    private string name = "";
    private int[] originalStats = new int[6];
    private int[] currentStats = new int[6];
    private int bonusPoints;
    private int minStat = 10;
    private int maxStat = 24;
    private string? apiUrl;

    // Tab state
    private int activeTab = 0;

    private List<Proficiency> allBasicProficiencies = new();
    private bool isLoadingProficiencies = true;

    private List<Proficiency> combatProficiencies = new();
    private List<Proficiency> buildProficiencies = new();
    private List<Proficiency> generalProficiencies = new();

    private bool CanCreate => !string.IsNullOrWhiteSpace(name) && BonusPointsLeft == 0;

    private HashSet<string> selectedProficiencies = new();
    private string? popupProficiency;
    private string? popupDescription;
    private bool showPopup = false;

    private int str { get => currentStats[0]; set => UpdateStat(0, value); }
    private int dex { get => currentStats[1]; set => UpdateStat(1, value); }
    private int con { get => currentStats[2]; set => UpdateStat(2, value); }
    private int intel { get => currentStats[3]; set => UpdateStat(3, value); }
    private int wis { get => currentStats[4]; set => UpdateStat(4, value); }
    private int cha { get => currentStats[5]; set => UpdateStat(5, value); }

    private string combatHeader = "combat";
    private string buildHeader = "build";
    private string generalHeader = "general";

    protected override async Task OnInitializedAsync()
    {
        apiUrl = Configuration["Api:BaseUrlProficiency"];
        RollStats();
        await LoadBasicProficiencies();
    }

    private async Task LoadBasicProficiencies()
    {
        try
        {

            var basicApiUrl = $"{apiUrl}/basic";
            var result = await Http.GetFromJsonAsync<List<Proficiency>>(basicApiUrl);
            allBasicProficiencies = result ?? new List<Proficiency>();

            combatProficiencies = allBasicProficiencies.Where(p => p.Type == ProficiencyType.Combat).ToList();
            buildProficiencies = allBasicProficiencies.Where(p => p.Type == ProficiencyType.Build).ToList();
            generalProficiencies = allBasicProficiencies.Where(p => p.Type == ProficiencyType.General).ToList();
        }
        finally
        {
            isLoadingProficiencies = false;
        }
    }

    private void RollStats()
    {
        var rng = new Random();
        for (int i = 0; i < 6; i++)
        {
            originalStats[i] = rng.Next(minStat, maxStat + 1);
            currentStats[i] = originalStats[i];
        }
        CalculateBonus();
    }

    private void CalculateBonus()
    {
        double avg = currentStats.Average();
        if (avg < 12) bonusPoints = 6;
        else if (avg < 13) bonusPoints = 5;
        else if (avg < 15) bonusPoints = 4;
        else if (avg < 17) bonusPoints = 3;
        else if (avg < 19) bonusPoints = 2;
        else bonusPoints = 1;
    }

    private int BonusPointsLeft =>
        bonusPoints + currentStats.Select((val, idx) => originalStats[idx] - val).Sum();

    private void UpdateStat(int index, int value)
    {
        int min = originalStats[index] - 1;
        int max = maxStat;
        value = Math.Clamp(value, min, max);

        int used = currentStats.Sum() - originalStats.Sum();
        int available = bonusPoints - used;

        int diff = value - currentStats[index];

        if (diff > 0 && diff > BonusPointsLeft)
            return;

        if (value < min)
            return;

        currentStats[index] = value;
        StateHasChanged();
    }

    private void ClosePopup()
    {
        showPopup = false;
    }
    private void CreateCharacter()
    {
        var character = new Character(CharacterType.PC, name)
        {
            Strength = str,
            Dexterity = dex,
            Constitution = con,
            Intelligence = intel,
            Wisdom = wis,
            Charisma = cha
        };

        foreach (var profName in selectedProficiencies)
        {
            character.AddProficiencyExperience(profName, 100);
        }

        OnCharacterCreated.InvokeAsync(character);
    }
    private async Task CreateCharacterAsync()
    {
        var character = new Character(CharacterType.PC, name)
        {
            Strength = str,
            Dexterity = dex,
            Constitution = con,
            Intelligence = intel,
            Wisdom = wis,
            Charisma = cha
        };

        foreach (var profName in selectedProficiencies)
        {
            character.AddProficiencyExperience(profName, 100);
        }

        var apiBase = Configuration["Api:BaseUrlCharacter"] ?? "api/character";
        var request = new
        {
            UserName = UserSession.Username,
            Password = UserSession.HashedPassword,
            Character = character
        };

        var response = await Http.PostAsJsonAsync($"{apiBase}/create", request);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<CreateCharacterResult>();
            if (result is not null)
            {
                character.Id = result.CharacterId;
                await OnCharacterCreated.InvokeAsync(character);
                UserSession.activeChar = character;
                UserSession.stateOfGame = result.GameState;
                await UserSession.SaveSessionAsync();
                showPopup = false; // Close popup
                Navigation.NavigateTo("/"); // Go to Home
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
        }
    }


}

   